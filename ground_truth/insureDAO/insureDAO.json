{
    "title": "InsureDAO contest",
    "sponsor": "InsureDAO",
    "slug": "2022-01-insure",
    "date": "2022-03-15",
    "contest": "71",
    "findings": [
        {
            "id": "H-01",
            "title": "Tokens can be burned with no access control",
            "description": "The Vault.sol contract has two address state variables, the `keeper` variable and the `controller` variable, which are both permitted to be the zero address. If both variables are zero simultaneously, any address can burn the available funds (available funds = balance - totalDebt) by sending these tokens to the zero address with the unprotected `utilitize()` function. If a user has no totalDebt, the user can lose their entire underlying token balance because of this.",
            "severity": "high",
            "function": "utilitize",
            "file": "contracts/Vault.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "H-02",
            "title": "Typo in PoolTemplate unlock function results in user being able to unlock multiple times",
            "description": "The function `unlock()` in PoolTemplate has a typo where it compares `insurances[_id].status` to `false` rather than setting it to `false`. If the conditions are met to unlock the funds for an id, the user should be able to call the `unlock()` function once for that id as `insurances[_id].amount` is subtracted from `lockedAmount`. However, since `insurances[_id].status` does not get set to `false`, a user can call `unlock()` multiple times for the same id, resulting in `lockedAmount` being way smaller than it should be since `insurances[_id].amount` is subtracted multiple times.\n\n`lockedAmount` is used to calculate the amount of underlying tokens available for withdrawals. If `lockedAmount` is lower than it should be users are able to withdraw more underlying tokens than available for withdrawals.",
            "severity": "high",
            "function": "unlock",
            "file": "contracts/PoolTemplate.sol",
            "bug_type": "Inconsistent State Updates"
        },
        {
            "id": "H-03",
            "title": "Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts",
            "description": "The current method of market creation involves calling `Factory.createMarket()` with a list of approved `_conditions` and `_references` accounts. If a registered template address has `templates[address(_template)].isOpen == true`, then any user is able to call `createMarket()` using this template. If the template points to `PoolTemplate.sol`, then a malicious market creator can abuse `PoolTemplate.initialize()` as it makes a vault deposit from an account that they control. The vulnerable internal function, `_depositFrom()`, makes a vault deposit from the `_references[4]` address (arbitrarily set to an approved reference address upon market creation).\n\nHence, if approved `_references` accounts have set an unlimited approval amount for `Vault.sol` before deploying their market, a malicious user can frontrun market creation and cause these tokens to be transferred to the incorrect market.\n\nThis issue can cause honest market creators to have their tokens transferred to an incorrectly configured market, leading to unrecoverable funds. If their approval to `Vault.sol` was set to the unlimited amount, malicious users will also be able to force honest market creators to transfer more tokens than they would normally want to allow.",
            "severity": "high",
            "function": "initialize",
            "file": "contracts/Factory.sol",
            "bug_type": "Privilege Escalation "
        },
        {
            "id": "H-04",
            "title": "Initial pool deposit can be stolen",
            "description": "The initial depositor needs to first approve the vault contract for the `transferFrom` to succeed. An attacker can then frontrun the `Factory.createMarket` transaction with their own market creation (it does not have access restrictions) and create a market *with different parameters* but still passing in `_conditions[1]=amount` and `_references[4]=victim`. A market with parameters that the initial depositor did not want (different underlying, old whitelisted registry/parameter contract, etc.) can be created with their tokens and these tokens are essentially lost.",
            "severity": "high",
            "function": "initialize",
            "file": "contracts/PoolTemplate.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "H-05",
            "title": "Backdoor in `withdrawRedundant`",
            "description": "The `Vault.withdrawRedundant` has wrong logic that allows the admins to steal the underlying vault token. Vault deposits increase as `Vault.addValue` is called and the `balance` increases by `_amount` as well as the actual `IERC20(token).balanceOf(this)`. Note that `balance == IERC20(token).balanceOf(this)`.\n\nAdmins call `vault.withdrawRedundant(vault.token(), attacker)` which goes into the `else if` branch due to the balance inequality condition being `false`. It will transfer out all `vault.token()` amounts to the attacker.",
            "severity": "high",
            "function": "withdrawRedundant",
            "file": "contracts/Vault.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "H-06",
            "title": "The first depositor to a pool can drain all users",
            "description": "If there is no liquidity in the pool, the first deposit determines the total liquidity. If the amount is too small, the minted liquidity for the next liquidity providers will round down to zero. An attacker can steal all money from liquidity providers.",
            "severity": "high",
            "function": "deposit",
            "file": "contracts/PoolTemplate.sol",
            "bug_type": "Erroneous Accounting"
        },
        {
            "id": "H-07",
            "title": "Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users' wallet balances",
            "description": "The current design/implementation allows a `market` address (registered on `registry`) to call `Vault#addValue()` and transfer tokens from an arbitrary address to a specified `_beneficiary` up the approved amount at any time, and the `_beneficiary` can withdraw the funds by calling `Vault#withdrawAllAttribution()` immediately.\n\nThis poses a very dangerous risk to all the users that approved their tokens to the Vault contracts (each one holds all users' allowances for that token). Registry owner can call `Registry#supportMarket()` and mark an arbitrary address as a `market`. Or, the owner of the Factory can call `createMarket()` to add a malicious market contract via a custom template contract to the `markets` list.\n\nThe malicious/compromised Registry owner can repeat the steps above for all the users who approved the Vault contract for all the Vault contracts. As a result, the attacker can steal all the wallet balances of the tokens approved to the protocol.",
            "severity": "high",
            "function": "addValue",
            "file": "contracts/Vault.sol",
            "bug_type": "Privilege Escalation"
        },{
            "id": "H-08",
            "title": "`IndexTemplate.sol#compensate()` will most certainly fail",
            "description": "Precision loss while converting between `the amount of shares` and `the amount of underlying tokens` back and forth is not handled properly. In the current implementation, when someone tries to resume the market after a pending period ends by calling `PoolTemplate.sol#resume()`, `IndexTemplate.sol#compensate()` will be called internally to make a payout. If the index pool is unable to cover the compensation, the CDS pool will then be used to cover the shortage.\n\nHowever, while `CDSTemplate.sol#compensate()` takes a parameter for the amount of underlying tokens, it uses `vault.transferValue()` to transfer corresponding `_attributions` (shares) instead of underlying tokens. Due to precision loss, the `_attributions` transferred in the terms of underlying tokens will most certainly be less than the shortage. At L444, the contract believes that it's been compensated for `_value + _cds`, which is lower than the actual value, due to precision loss. At L446, when it calls `vault.offsetDebt(_compensated, msg.sender)`, the tx will revert.",
            "severity": "high",
            "function": "compensate",
            "file": "contracts/IndexTemplate.sol",
            "bug_type": "Erroneous Accounting"
        },
        {
            "id": "H-09",
            "title": "`Vault#setController()` owner of the Vault contracts can drain funds from the Vault",
            "description": "The owner of the Vault contract can set an arbitrary address as the `controller`. A malicious `controller` contract can transfer funds from the Vault to the attacker. The owner can call `Vault#setController()` and set `controller` to a malicious contract. Then, the owner can call `Vault#utilize()` to deposit all the balance in the Vault contract into the malicious controller contract and withdraw all the funds from the malicious controller contract.",
            "severity": "high",
            "function": "setController",
            "file": "contracts/Vault.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "H-10",
            "title": "A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts",
            "description": "The current design/implementation allows a market address (registered on the `registry`) to call `Vault#borrowValue()` and transfer tokens to an arbitrary address. This design relies on the assumption that the Registry and Factory admins are not compromised. If they are, the admin can add a malicious market contract and use it to borrow and drain funds from the Vault.",
            "severity": "high",
            "function": "borrowValue",
            "file": "contracts/Vault.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "H-11",
            "title": "`PoolTemplate.sol#resume()` Wrong implementation of `resume()` will compensate overmuch redeem amount from index pools",
            "description": "Wrong arithmetic in the implementation of `resume()` causes the index pool to compensate more than it should. If a pool has a debt that needs to be compensated, the implementation incorrectly calculates the share of the index pool, causing the amounts deducted to be unfair. This results in an over-compensation from the index pool, which penalizes the index pool liquidity providers.",
            "severity": "high",
            "function": "resume",
            "file": "contracts/PoolTemplate.sol",
            "bug_type": "Erroneous Accounting"
        },
        {
            "id": "H-12",
            "title": "`IndexTemplate.sol` Wrong implementation allows lp of the index pool to resume a locked `PayingOut` pool and escape the responsibility for the compensation",
            "description": "Based on the context, the system intends to lock all the LPs during the PayingOut period. However, the current implementation allows anyone, including LPs, to call `resume()` and unlock the index pool. It allows a malicious LP to escape the responsibility for the compensation at the expense of other LPs paying more than expected.",
            "severity": "high",
            "function": "resume",
            "file": "contracts/IndexTemplate.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "H-13",
            "title": "Admin of the index pool can `withdrawCredit()` after `applyCover()` to avoid taking loss for the compensation paid for a certain pool",
            "description": "In the current implementation, when an incident is reported for a certain pool, the index pool can still `withdrawCredit()` from the pool. In the best interest of the index pool, the admin of the index pool will prefer to do so to escape responsibility for covering compensation. This results in other LPs paying for the incident unfairly while the index pool admin avoids any loss.",
            "severity": "high",
            "function": "withdrawCredit",
            "file": "contracts/PoolTemplate.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "M-01",
            "title": "repayDebt in Vault.sol could DOS functionality for markets",
            "description": "Any user can pay the debt for any borrower in `Vault.sol`, by using `repayDebt()`. This function allows anyone to repay any amount of borrowed value, up-to and including the `totalDebt` value; it works by setting the `debts[_target]` to zero, and decreasing `totalDebt` by the given amount, up to zero. However, all debts of the other borrowers are left untouched.\n\nIf a malicious (but generous) user were to repay the debt for all the borrowers, markets functionality regarding borrowing would be DOSed: the vault would try to decrease the debt of the market, successfully, but would fail to decrease `totalDebt` as it would result in an underflow.",
            "severity": "medium",
            "function": "repayDebt",
            "file": "contracts/Vault.sol"
        },
        {
            "id": "M-02",
            "title": "Owner can call `applyCover` multiple times in `PoolTemplate.sol`",
            "description": "The owner could potentially extend the insurance period indefinitely in the `applyCover` function without ever allowing the market to resume. This is because there is no check in `applyCover` to ensure that the market is in a `Trading` state. This can also allow the owner to emit fraudulent `MarketStatusChanged` events.",
            "severity": "medium",
            "function": "applyCover",
            "file": "contracts/PoolTemplate.sol"
        },
        {
            "id": "M-03",
            "title": "Signature replay",
            "description": "The `redeem` method of `PoolTemplate` verifies the data stored in `incident`, and the verification logic only checks specific parameters like `target` and `insured`. However, the incident has no relation to the `Insurance`, and nothing prevents a user from reusing an `insure` operation with high amounts.\n\nIf the owner creates an incident with an `_incidentTimestamp` in the future, a user could create a new `insure` that could be reused later. Another lack of input verification that could facilitate this attack is the `_span=0` in the `insure` method.",
            "severity": "medium",
            "function": "redeem",
            "file": "contracts/PoolTemplate.sol"
        },
        {
            "id": "M-04",
            "title": "System Debt Is Not Handled When Insurance Pools Become Insolvent",
            "description": "If an incident has occurred where an insurance policy is to be redeemed, the market is put into the `MarketStatus.Payingout` mode where the insured account can redeem their cover. If the insurance pool is insolvent, the system queries `IndexTemplate.compensate()` and `CDSTemplate.compensate()` to cover the shortage.\n\nIn the event none of these entities are able to cover the shortage in debt, the system accrues the debt. However, there is currently no mechanism to ensure that the accrued system debt is handled properly when `transferDebt()` is called in `PoolTemplate.resume()`. Therefore, the system may incorrectly handle insolvency on an extreme edge case, generating system instability.",
            "severity": "medium",
            "function": "resume",
            "file": "contracts/PoolTemplate.sol"
        },
        {
            "id": "M-05",
            "title": "`Vault.sol` Tokens with fee on transfer are not supported",
            "description": "There are ERC20 tokens that charge a fee for every `transfer()` / `transferFrom()` call. The function `Vault.sol#addValue()` assumes that the received amount is the same as the transfer amount and uses this to calculate attributions, balance amounts, etc. However, the actual transferred amount can be lower for tokens that charge fees. This discrepancy can cause the contract to miscalculate balances and attributions.",
            "severity": "medium",
            "function": "addValue",
            "file": "contracts/Vault.sol"
        },
        {
            "id": "M-06",
            "title": "Index compensate is 0 when totalLiquidity() is enough to cover the whole amount",
            "description": "In `IndexTemplate`, the function `compensate` does not set a value for `_compensated` when `_amount > _value` but less than or equal to `totalLiquidity()`. As a result, `_compensated` defaults to 0. Despite this, the function proceeds to call `vault.offsetDebt` with the zero value. This behavior is incorrect and could cause unintended consequences when handling debts and compensation logic.",
            "severity": "medium",
            "function": "compensate",
            "file": "contracts/IndexTemplate.sol"
        },
        {
            "id": "M-07",
            "title": "`requestWithdraw` without obligation to withdraw allow underwriter to avoid payout",
            "description": "To prevent withdrawal front-running, a lockup period is set between a withdrawal request and the actual withdrawal. However, there is no obligation for underwriters to withdraw after the lockup period. As a result, underwriters can repeatedly request withdrawal without actually withdrawing, effectively keeping their funds in the pool while avoiding risk. This strategy allows underwriters to reduce their effective lockup to half the lockup period while continuing to earn premiums.",
            "severity": "medium",
            "function": "requestWithdraw",
            "file": "contracts/PoolTemplate.sol"
        },
        {
            "id": "M-08",
            "title": "Unbounded iteration over all indexes (2)",
            "description": "The function in question iterates over all the elements in an array without bounds. If the array grows too large, the transaction would consume more gas than the block gas limit, causing it to fail. This would result in a denial of service for the intended functionality, breaking core protocol operations that rely on this function.",
            "severity": "medium",
            "function": "resume",
            "file": "contracts/PoolTemplate.sol"
        },
        {
            "id": "M-09",
            "title": "Withdrawals can be DOSed due to improper iteration in index compensation",
            "description": "In scenarios where there are a large number of indexes in the system, the compensation logic iterates through all of them without sufficient safeguards. This unbounded iteration can cause transactions to revert due to gas limits being exceeded. This behavior creates a risk of denial of service for withdrawals and could lead to a systemic failure in resuming markets or compensating pools.",
            "severity": "medium",
            "function": "compensate",
            "file": "contracts/IndexTemplate.sol"
        }
    ]
}
