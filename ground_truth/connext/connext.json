{
    "title": "Connext",
    "sponsor": "Connext",
    "slug": "2021-07-connext-findings",
    "date": "2021-08-30",
    "contest": "19",
    "findings": [
        {
            "id": "H-01",
            "title": "Anyone can arbitrarily add router liquidity",
            "description": "The `addLiquidity()` function takes a router address parameter, whose liquidity is increased (instead of assuming that `router` == `msg.sender` like is done on `removeLiquidity()`) on this contract/chain, by transferring the fund amount from router address to this contract if `assetID` != 0 (i.e. ERC20 tokens). However, anyone can call this function on the router’s behalf. For `assetID` == 0, the Ether transfer via `msg.value` comes from `msg.sender` and hence is assumed to be the router itself. The impact is that this will allow anyone to call this function and arbitrarily move ERC20 tokens from router address to this contract, assuming router has given max approval to this contract and has `assetID` amount available for transfer. While the router can always remove the liquidity if it doesn’t want to maintain that level of liquidity, this lack of access control or flexibility for a relayer to add liquidity on router’s behalf, may unnecessarily (and without authorization) increase the router’s exposure to protocol risk to more than it desires.",
            "severity": "High",
            "function": "addLiquidity",
            "file": "TransactionManager.sol",
            "bug_type": "Privilege Escalation"
        },
        {
            "id": "H-02",
            "title": "`activeTransactionBlocks` are vulnerable to DDoS attacks",
            "description": "There is a potential issue in function `removeUserActiveBlocks` and the for loop inside it. I assume you are aware of block gas limits (they may be less relevant on other chains but still needs to be accounted for), so as there is no limit for `activeTransactionBlocks`, it may grow so large that the for loop may never finish. You should consider introducing an upper limit for `activeTransactionBlocks`. Also, a malicious actor may block any account (DDOS) by just calling `prepare` again and again with 0 amount acting as a router. This will push `activeTransactionBlocks` to the specified user until it is no longer possible to remove them from the array.",
            "severity": "High",
            "function": "removeUserActiveBlocks",
            "file": "TransactionManager.sol",
            "bug_type": "Gas-Related Issue"
        },
        {
            "id": "H-03",
            "title": "Router liquidity on receiving chain can be double-dipped by the user",
            "description": "During `fulfill()` on the receiving chain, if the user has set up an external contract at `txData.callTo`, the catch blocks for both `IFulfillHelper.addFunds()` and `IFulfillHelper.excute()` perform `transferAsset` to the predetermined fallback address `txData.receivingAddress`. If `addFunds()` has reverted earlier, `toSend` amount would already have been transferred to the `receivingAddress`. If `execute()` also fails, it is again transferred.",
            "severity": "High",
            "function": "fulfill",
            "file": "TransactionManager.sol",
            "bug_type": "Inconsistent State Updates"
        },
        {
            "id": "H-04",
            "title": "Expired transfers will lock user funds on the sending chain",
            "description": "The cancelling relayer is being paid in `receivingAssetId` on the `sendingChain` instead of in `sendingAssetID`. If the user relies on a relayer to cancel transactions, and that `receivingAssetId` asset does not exist on the sending chain (assuming only `sendingAssetID` on the sending chain and `receivingAssetId` on the receiving chain are assured to be valid and present), then the cancel transaction from the relayer will always revert and user’s funds will remain locked on the sending chain. The impact is that expired transfers can never be cancelled and user funds will be locked forever if user relies on a relayer.",
            "severity": "High",
            "function": "cancel",
            "file": "TransactionManager.sol",
            "bug_type": "Contract Implementation-Specific Bug"
        },
        {
            "id": "H-05",
            "title": "`Approval` is not reset if the call to `IFulfillHelper` fails",
            "description": "The function `fulfill` first approves the `callTo` to transfer an amount of `toSend` tokens and tries to call `IFulfillHelper`, but if the call fails, it transfers these assets directly. However, in such case the approval is not reset, so a malicous `callTo` can pull these tokens later",
            "severity": "High",
            "function": "fulfill",
            "file": "TransactionManager.sol",
            "bug_type": "Inconsistent State Updates"
        },
        {
            "id": "M-01",
            "title": "Signatures use only tx ID instead of entire digest",
            "description": "The signature check in `recoverFulfillSignature()` only uses transaction ID (along with the relayer fee) which can be accidentally reused by the user, in which case the older signatures with the older relayer fees can be replayed.  The signature should be on the entire digest `hashInvariantTransactionData(txData)` as indicated in the comment on L306. The impact is that,  If the user signatures are indeed on the digest as indicated by the comment, the signature/address check in `fulfill()` will fail. If not, they may be accidentally/intentionally replayed with same transaction ID, which also appears to be an outstanding question as indicated by the comment on L12. `recoverCancelSignature()` similarly uses only tx ID.",
            "severity": "Medium",
            "function": "recoverFulfillSignature",
            "file": "TransactionManager.sol"
        },
        {
            "id": "M-02",
            "title": "Malicious router can block cross-chain-transfers",
            "description": "The agreement between the `user` and the `router` seems to already happen off-chain because all the fields are required for the initial `In variantTransactionData` call already. A router could pretend to take on a user's cross-chain transfer, the user sends their `prepare` transaction, locking up funds on the sending chain. But then the `router` simply doesn't respond or responds with a `prepare` transaction of `amount=0`.  The user's funds are then locked for the entire expiry time, whereas the router does not have to lock up anything as the amount is 0, even no gas if they simply don't respond. In this way, a router can bid on everything off-chain without a penalty, and take down everyone that accepts the bid. Recommend that maybe there could be a penalty mechanism for non-responsive routers that agreed off-chain, slashing part of their added liquidity. Could also be that the bid signature already helps with this, but I'm not sure how it works as the off-chain part is not part of the repo.",
            "severity": "Medium",
            "function": "prepare",
            "file": "TransactionManager.sol"
        },
        {
            "id": "L-01",
            "title": "Lack of guarded launch approach may be risky",
            "description": "The protocol lacks initial time-bounded whitelisting or pause functionality for emergency handling.",
            "severity": "LOW",
            "function": "N/A",
            "file": "TransactionManager.sol"
        },
        {
            "id": "L-02",
            "title": "Deflationary and fee-on-transfer tokens are not correctly accounted",
            "description": "Balances are incorrectly updated for deflationary tokens.",
            "severity": "LOW",
            "function": "addLiquidity",
            "file": "TransactionManager.sol"
        },
        {
            "id": "L-03",
            "title": "Missing zero-address checks",
            "description": "Certain functions lack zero-address checks, which can lead to errors or funds being burned.",
            "severity": "LOW",
            "function": "addLiquidity, removeLiquidity",
            "file": "TransactionManager.sol"
        },
        {
            "id": "L-04",
            "title": "An attacker can front-run a user’s `prepare()` tx on sending chain to cause DoS by griefing",
            "description": "Front-running the `prepare()` function can cause griefing attacks.",
            "severity": "LOW",
            "function": "prepare",
            "file": "TransactionManager.sol"
        },
        {
            "id": "L-05",
            "title": "`txData.expiry` = `block.timestamp`",
            "description": "Inconsistencies in handling `txData.expiry` may cause unexpected behavior.",
            "severity": "LOW",
            "function": "fulfill, cancel",
            "file": "TransactionManager.sol"
        }
    ]
}
